***************************
Appendix B The boot loader
***************************

.. figure:: FB-1.png

    Figure B-1. The relationship between logical, linear, and physical addresses.


When an x86 PC boots, it starts executing a program called the BIOS, which isstored in non-volatile memory on the motherboard. The BIOS’s job is to prepare thehardware and then transfer control to the operating system. Speciﬁcally, it transferscontrol to code loaded from the boot sector, the ﬁrst 512-byte sector of the boot disk.The boot sector contains the boot loader: instructions that load the kernel into memory. The BIOS loads the boot sector at memory address 0x7c00 and then jumps (setsthe processor’s %ip) to that address. When the boot loader begins executing, the processor is simulating an Intel 8088, and the loader’s job is to put the processor in amore modern operating mode, to load the xv6 kernel from disk into memory, andthen to transfer control to the kernel. The xv6 boot loader comprises two source ﬁles,one written in a combination of 16-bit and 32-bit x86 assembly (bootasm.S;(8400))and one written in C (bootmain.c;(8500)).

Code: Assembly bootstrap
=========================

The ﬁrst instruction in the boot loader is cli (8412), which disables processor interrupts. Interrupts are a way for hardware devices to invoke operating system functions called interrupt handlers. The BIOS is a tiny operating system, and it might haveset up its own interrupt handlers as part of the initializing the hardware. But theBIOS isn’t running anymore—the boot loader is—so it is no longer appropriate or safeto handle interrupts from hardware devices. When xv6 is ready (in Chapter 3), it willre-enable interrupts.

The processor is in real mode, in which it simulates an Intel 8088. In real modethere are eight 16-bit general-purpose registers, but the processor sends 20 bits of address to memory. The segment registers %cs,%ds,%es, and %ss provide the additionalbits necessary to generate 20-bit memory addresses from 16-bit registers. When a program refers to a memory address, the processor automatically adds 16 times the valueof one of the segment registers; these registers are 16 bits wide. Which segment register is usually implicit in the kind of memory reference: instruction fetches use %cs,data reads and writes use %ds, and stack reads and writes use %ss.

Xv6 pretends that an x86 instruction uses a virtual address for its memoryoperands, but an x86 instruction actually uses a logical address (see Figure B-1). Alogical address consists of a segment selector and an offset, and is sometimes writtenas segment:offset. More often, the segment is implicit and the program only directlymanipulates the offset. The segmentation hardware performs the translation describedabove to generate a linear address. If the paging hardware is enabled (see Chapter2), it translates linear addresses to physical addresses; otherwise the processor uses linear addresses as physical addresses.

The boot loader does not enable the paging hardware; the logical addresses that ituses are translated to linear addresses by the segmentation harware, and then used directly as physical addresses. Xv6 conﬁgures the segmentation hardware to translatelogical to linear addresses without change, so that they are always equal. For historicalreasons we have used the term virtual address to refer to addresses manipulated byprograms; an xv6 virtual address is the same as an x86 logical address, and is equal tothe linear address to which the segmentation hardware maps it. Once paging is enabled, the only interesting address mapping in the system will be linear to physical.

The BIOS does not guarantee anything about the contents of %ds,%es,%ss, soﬁrst order of business after disabling interrupts is to set %ax to zero and then copythat zero into %ds,%es, and %ss (8415-8418)

A virtual segment:offset can yield a 21-bit physical address, but the Intel 8088could only address 20 bits of memory, so it discarded the top bit: 0xffff0+0xffff =0x10ffef, but virtual address 0xffff:0xffff on the 8088 referred to physical address0x0ffef. Some early software relied on the hardware ignoring the 21st address bit, sowhen Intel introduced processors with more than 20 bits of physical address, IBM provided a compatibility hack that is a requirement for PC-compatible hardware. If thesecond bit of the keyboard controller’s output port is low, the 21st physical address bitis always cleared; if high, the 21st bit acts normally. The boot loader must enable the21st address bit using I/O to the keyboard controller on ports 0x64 and 0x60 (8420-8436).

Real mode’s 16-bit general-purpose and segment registers make it awkward for aprogram to use more than 65,536 bytes of memory, and impossible to use more than amegabyte. x86 processors since the 80286 have a protected mode, which allows physical addresses to have many more bits, and (since the 80386) a ‘‘32-bit’’ mode thatcauses registers, virtual addresses, and most integer arithmetic to be carried out with32 bits rather than 16. The xv6 boot sequence enables protected mode and 32-bitmode as follows.

In protected mode, a segment register is an index into a segment descriptortable (see Figure B-2). Each table entry speciﬁes a base physical address, a maximumvirtual address called the limit, and permission bits for the segment. These permissions are the protection in protected mode: the kernel can use them to ensure that aprogram uses only its own memory.

xv6 makes almost no use of segments; it uses the paging hardware instead, asChapter 2 describes. The boot loader sets up the segment descriptor table gdt (8482-8485) so that all segments have a base address of zero and the maximum possible limit(four gigabytes). The table has a null entry, one entry for executable code, and one entry to data. The code segment descriptor has a flag set that indicates that the codeshould run in 32-bit mode (0660). With this setup, when the boot loader enters protected mode, logical addresses map one-to-one to physical addresses.

.. figure:: FB-2.png

    Figure B-2. Segments in protected mode.


The boot loader executes an lgdt instruction (8441) to load the processor’s globaldescriptor table (GDT) register with the value gdtdesc (8487-8489), which points to thetable gdt.

Once it has loaded the GDT register, the boot loader enables protected mode bysetting the 1 bit (CR0_PE) in register %cr0 (8442-8444). Enabling protected mode doesnot immediately change how the processor translates logical to physical addresses; it isonly when one loads a new value into a segment register that the processor reads theGDT and changes its internal segmentation settings. One cannot directly modify %cs,so instead the code executes an ljmp (far jump) instruction (8453), which allows a codesegment selector to be speciﬁed. The jump continues execution at the next line (8456)but in doing so sets %cs to refer to the code descriptor entry in gdt. That descriptordescribes a 32-bit code segment, so the processor switches into 32-bit mode. The bootloader has nursed the processor through an evolution from 8088 through 80286 to80386.

The boot loader’s ﬁrst action in 32-bit mode is to initialize the data segment registers with SEG_KDATA (8458-8461). Logical address now map directly to physical addresses. The only step left before executing C code is to set up a stack in an unusedregion of memory. The memory from 0xa0000 to 0x100000 is typically littered withdevice memory regions, and the xv6 kernel expects to be placed at 0x100000. Theboot loader itself is at 0x7c00 through 0x7d00. Essentially any other section of memory would be a ﬁne location for the stack. The boot loader chooses 0x7c00 (known inthis ﬁle as $start) as the top of the stack; the stack will grow down from there, toward 0x0000, away from the boot loader.

Finally the boot loader calls the C function bootmain (8468).Bootmain’s job is toload and run the kernel. It only returns if something has gone wrong. In that case,the code sends a few output words on port 0x8a00 (8470-8476). On real hardware, thereis no device connected to that port, so this code does nothing. If the boot loader isrunning inside a PC simulator, port 0x8a00 is connected to the simulator itself andcan transfer control back to the simulator. Simulator or not, the code then executes aninﬁnite loop (8477-8478). A real boot loader might attempt to print an error messageﬁrst.

Code: C bootstrap
==================

The C part of the boot loader, bootmain.c (8500), expects to ﬁnd a copy of thekernel executable on the disk starting at the second sector. The kernel is an ELF format binary, as we have seen in Chapter 2. To get access to the ELF headers, bootmainloads the ﬁrst 4096 bytes of the ELF binary (8514). It places the in-memory copy at address 0x10000.

The next step is a quick check that this probably is an ELF binary, and not anuninitialized disk. Bootmain reads the section’s content starting from the disk locationoff bytes after the start of the ELF header, and writes to memory starting at addresspaddr.Bootmain calls readseg to load data from disk (8538) and calls stosb to zerothe remainder of the segment (8540).Stosb (0492) uses the x86 instruction rep stosbto initialize every byte of a block of memory.

The kernel has been compiled and linked so that it expects to ﬁnd itself at virtualaddresses starting at 0x80100000. That is, function call instructions mention destination addresses that look like 0xf01xxxxx; you can see examples in kernel.asm. Thisaddress is conﬁgured in kernel.ld.0x80100000 is a relatively high address, towardsthe end of the 32-bit address space; Chapter 2 explains the reasons for this choice.There may not be any physical memory at such a high address. Once the kernel startsexecuting, it will set up the paging hardware to map virtual addresses starting at0x80100000 to physical addresses starting at 0x00100000; the kernel assumes thatthere is physical memory at this lower address. At this point in the boot process, however, paging is not enabled. Instead, kernel.ld speciﬁes that the ELF paddr start at0x00100000, which causes the boot loader to copy the kernel to the low physical addresses to which the paging hardware will eventually point.

The boot loader’s ﬁnal step is to call the kernel’s entry point, which is the instruction at which the kernel expects to start executing. For xv6 the entry address is0x10000c:

::

    # objdump -f kernel
    
    kernel: file format elf32-i386
    architecture: i386, flags 0x00000112:
    EXEC_P, HAS_SYMS, D_PAGED
    start address 0x0010000c


By convention, the _start symbol speciﬁes the ELF entry point, which is deﬁned inthe ﬁle entry.S (1036). Since xv6 hasn’t set up virtual memory yet, xv6’s entry point isthe physical address of entry (1040).

Real world
===========

The boot loader described in this appendix compiles to around 470 bytes of machine code, depending on the optimizations used when compiling the C code. In order to ﬁt in that small amount of space, the xv6 boot loader makes a major simplifying assumption, that the kernel has been written to the boot disk contiguously startingat sector 1. More commonly, kernels are stored in ordinary ﬁle systems, where theymay not be contiguous, or are loaded over a network. These complications require the boot loader to be able to drive a variety of disk and network controllers and understand various ﬁle systems and network protocols. In other words, the boot loader itselfmust be a small operating system. Since such complicated boot loaders certainly won’tﬁt in 512 bytes, most PC operating systems use a two-step boot process. First, a simple boot loader like the one in this appendix loads a full-featured boot-loader from aknown disk location, often relying on the less space-constrained BIOS for disk accessrather than trying to drive the disk itself. Then the full loader, relieved of the 512-bytelimit, can implement the complexity needed to locate, load, and execute the desiredkernel. Perhaps a more modern design would have the BIOS directly read a largerboot loader from the disk (and start it in protected and 32-bit mode).

This appendix is written as if the only thing that happens between power on andthe execution of the boot loader is that the BIOS loads the boot sector. In fact theBIOS does a huge amount of initialization in order to make the complex hardware ofa modern computer look like a traditional standard PC.

Exercises
==========

1. Due to sector granularity, the call to readseg in the text is equivalent to read-seg((uchar*)0x100000, 0xb500, 0x1000). In practice, this sloppy behavior turnsout not to be a problem Why doesn’t the sloppy readsect cause problems?
2. something about BIOS lasting longer + security problems
3. Suppose you wanted bootmain() to load the kernel at 0x200000 instead of0x100000, and you did so by modifying bootmain() to add 0x100000 to the va of eachELF section. Something would go wrong. What?
4. It seems potentially dangerous for the boot loader to copy the ELF header to memory at the arbitrary location 0x10000. Why doesn’t it call malloc to obtain the memory it needs?
