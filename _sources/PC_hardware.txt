***********************
Appendix A PC hardware
***********************

This appendix describes personal computer (PC) hardware, the platform on whichxv6 runs.

A PC is a computer that adheres to several industry standards, with the goal thata given piece of software can run on PCs sold by multiple vendors. These standardsevolve over time and a PC from 1990s doesn’t look like a PC now.

From the outside a PC is a box with a keyboard, a screen, and various devices(e.g., CD-rom, etc.). Inside the box is a circuit board (the ‘‘motherboard’’) with CPUchips, memory chips, graphic chips, I/O controller chips, and busses through which thechips communicate. The busses adhere to standard protocols (e.g., PCI and USB) sothat devices will work with PCs from multiple vendors.

From our point of view, we can abstract the PC into three components: CPU,memory, and input/output (I/O) devices. The CPU performs computation, the memory contains instructions and data for that computation, and devices allow the CPU tointeract with hardware for storage, communication, and other functions.

You can think of main memory as connected to the CPU with a set of wires, orlines, some for address bits, some for data bits, and some for control flags. To read avalue from main memory, the CPU sends high or low voltages representing 1 or 0 bitson the address lines and a 1 on the ‘‘read’’ line for a prescribed amount of time andthen reads back the value by interpreting the voltages on the data lines. To write avalue to main memory, the CPU sends appropriate bits on the address and data linesand a 1 on the ‘‘write’’ line for a prescribed amount of time. Real memory interfacesare more complex than this, but the details are only important if you need to achievehigh performance.

Processor and memory
=====================

A computer’s CPU (central processing unit, or processor) runs a conceptually simple loop: it consults an address in a register called the program counter, reads a machine instruction from that address in memory, advances the program counter past theinstruction, and executes the instruction. Repeat. If the execution of the instructiondoes not modify the program counter, this loop will interpret the memory pointed atby the program counter as a sequence of machine instructions to run one after theother. Instructions that do change the program counter include branches and functioncalls.

The execution engine is useless without the ability to store and modify programdata. The fastest storage for data is provided by the processor’s register set. A registeris a storage cell inside the processor itself, capable of holding a machine word-sizedvalue (typically 16, 32, or 64 bits). Data stored in registers can typically be read or written quickly, in a single CPU cycle.

PCs have a processor that implements the x86 instruction set, which was originally deﬁned by Intel and has become a standard. Several manufacturers produce processors that implement the instruction set. Like all other PC standards, this standard isalso evolving but newer standards are backwards compatible with past standards. Theboot loader has to deal with some of this evolution because every PC processor startssimulating an Intel 8088, the CPU chip in the original IBM PC released in 1981.However, for most of xv6 you will be concerned with the modern x86 instruction set.

The modern x86 provides eight general purpose 32-bit registers—%eax,%ebx,%ecx,%edx,%edi,%esi,%ebp, and %esp—and a program counter %eip (the ‘ instruction pointer). The common epreﬁx stands for extended, as these are 32-bitextensions of the 16-bit registers %ax,%bx,%cx,%dx,%di,%si,%bp,%sp, and %ip. Thetwo register sets are aliased so that, for example, %ax is the bottom half of %eax: writing to %ax changes the value stored in %eax and vice versa. The ﬁrst four registersalso have names for the bottom two 8-bit bytes: %al and %ah denote the low and high8 bits of %ax;%bl,%bh,%cl,%ch,%dl, and %dh continue the pattern. In addition tothese registers, the x86 has eight 80-bit floating-point registers as well as a handful ofspecial-purpose registers like the control registers %cr0,%cr2,%cr3, and %cr4; thedebug registers %dr0,%dr1,%dr2, and %dr3; the segment registers %cs,%ds,%es,%fs,%gs, and %ss; and the global and local descriptor table pseudo-registers %gdtrand %ldtr. The control registers and segment registers are important to any operatingsystem. The floating-point and debug registers are less interesting and not used by xv6.

Registers are fast but expensive. Most processors provide at most a few tens ofgeneral-purpose registers. The next conceptual level of storage is the main random-access memory (RAM). Main memory is 10-100x slower than a register, but it is muchcheaper, so there can be more of it. One reason main memory is relatively slow is thatit is physically separate from the processor chip. An x86 processor has a few dozenregisters, but a typical PC today has gigabytes of main memory. Because of the enormous differences in both access speed and size between registers and main memory,most processors, including the x86, store copies of recently-accessed sections of mainmemory in on-chip cache memory. The cache memory serves as a middle ground between registers and memory both in access time and in size. Today’s x86 processorstypically have two levels of cache, a small ﬁrst-level cache with access times relativelyclose to the processor’s clock rate and a larger second-level cache with access times inbetween the ﬁrst-level cache and main memory. This table shows actual numbers foran Intel Core 2 Duo system:

+---------------------------------------+
|Intel Core 2 Duo E7200 at 2.53 GHz     |
+---------------------------------------+
|TODO: Plug in non-made-up numbers!     |
+------------+------------+-------------+
|storage     |access time |size         |
+============+============+=============+
|register    |0.6 ns      |64 bytes     |
+------------+------------+-------------+
|L1 cache    |0.5 ns      |64 kilobytes |
+------------+------------+-------------+
|L2 cache    |10 ns       |4 megabytes  |
+------------+------------+-------------+
|main memory |100 ns      |4 gigabytes  |
+------------+------------+-------------+

For the most part, x86 processors hide the cache from the operating system, so wecan think of the processor as having just two kinds of storage—registers and memory—and not worry about the distinctions between the different levels of the memoryhierarchy.

I/O
====

Processors must communicate with devices as well as memory. The x86 processorprovides special in and out instructions that read and write values from device addresses called I/O ports. The hardware implementation of these instructions is essentially the same as reading and writing memory. Early x86 processors had an extra address line: 0 meant read/write from an I/O port and 1 meant read/write from mainmemory. Each hardware device monitors these lines for reads and writes to its assigned range of I/O ports. A device’s ports let the software conﬁgure the device, examine its status, and cause the device to take actions; for example, software can use I/Oport reads and writes to cause the disk interface hardware to read and write sectors onthe disk.

Many computer architectures have no separate device access instructions. Insteadthe devices have ﬁxed memory addresses and the processor communicates with thedevice (at the operating system’s behest) by reading and writing values at those addresses. In fact, modern x86 architectures use this technique, called memory-mappedI/O, for most high-speed devices such as network, disk, and graphics controllers. Forreasons of backwards compatibility, though, the old in and out instructions linger, asdo legacy hardware devices that use them, such as the IDE disk controller, which xv6uses.
